[
  {
    "comment":     "The sandbox global object is not the window itself, so all global variables need to be manually attached to the window.",
    "searchValue": "^(let|var) ([^ ]+)",
    "newValue":    "$1 $2 = window.$2"
  },
  {
    "comment":     "The sandbox global object is not the window itself, so all global functions need to be manually attached to the window.",
    "searchValue": "^function ([^ \\(]+)",
    "newValue":    "let $1 = window.$1 = function"
  },
  {
    "comment":     "Remove preprocessing directives.",
    "searchValue": "^#filter substitution.*$",
    "newValue":    ""
  },
  {
    "comment":     "Remove preprocessing directives.",
    "searchValue": "^#(ifdef|else|endif).*$",
    "newValue":    ""
  },
  {
    "comment":     "Remove preprocessing directives.",
    "searchValue": "^#expand",
    "newValue":    ""
  },
  {
    "comment":     "Telemetry uses #ifdef & #else to define preferences. Since we remove preprocessing, remove one of the set values",
    "searchValue": "^.*\"toolkit.telemetry.enabledPreRelease\".*$",
    "newValue":    ""
  },
  {
    "comment":     "XXX: Removes a lone 'null,' from the previously removed #else clause (https://mxr.mozilla.org/mozilla-central/source/mobile/android/chrome/content/browser.js?rev=14207ffc2b2f#5316).",
    "searchValue": "^[ ]+null,$",
    "newValue":    ""
  },
  {
    "comment":     "Replace chrome URIs with remote URLs to be bootstrapped. The string '%path%' will be replaced with the bootstrap path.",
    "searchValue": "chrome://browser/content/",
    "newValue":    "%path%content/"
  },
  {
    "comment":     "Replace loadSubScript() with a remote subscript loader.",
    "searchValue": "Services\\.scriptloader\\.loadSubScript\\(",
    "newValue":    "__loadRemoteSubScript__(name, "
  },
  {
    "comment":     "The window is not the global object, so getters need to be attached to the sandbox.",
    "searchValue": "defineLazyGetter\\(window",
    "newValue":    "defineLazyGetter(__this__"
  },
  {
    "comment":     "The window is not the global object, so getters need to be attached to the sandbox.",
    "searchValue": "defineLazyServiceGetter\\(window",
    "newValue":    "defineLazyServiceGetter(__this__"
  }
]
